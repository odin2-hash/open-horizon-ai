version: '3.8'

# Standalone Docker Compose for Open Horizon AI
# Users can run: curl -O https://raw.githubusercontent.com/odin2-hash/open-horizon-ai/main/docker-compose.standalone.yml && docker-compose -f docker-compose.standalone.yml up -d

services:
  # React Frontend
  frontend:
    image: ghcr.io/odin2-hash/open-horizon-ai-frontend:latest
    ports:
      - "3030:3030"
    environment:
      - REACT_APP_API_URL=http://localhost:8090
      - REACT_APP_SUPABASE_URL=${SUPABASE_URL:-https://demo.supabase.co}
      - REACT_APP_SUPABASE_KEY=${SUPABASE_KEY:-demo-key}
      - PORT=3030
    restart: unless-stopped
    networks:
      - open-horizon-network
    depends_on:
      - backend

  # FastAPI Backend  
  backend:
    image: ghcr.io/odin2-hash/open-horizon-ai-backend:latest
    ports:
      - "8090:8090"
    environment:
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o-mini}
      - LLM_BASE_URL=${LLM_BASE_URL:-https://api.openai.com/v1}
      - SUPABASE_URL=${SUPABASE_URL:-https://demo.supabase.co}
      - SUPABASE_KEY=${SUPABASE_KEY:-demo-key}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-demo-service-key}
      - ERASMUS_PARTNER_DB_API_KEY=${ERASMUS_PARTNER_DB_API_KEY:-demo-partner-key}
      - SECRET_KEY=${SECRET_KEY:-development-secret-key-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_HOURS=24
      - APP_ENV=docker
      - DEBUG=false
      - LOG_LEVEL=INFO
      - MAX_RETRIES=3
      - TIMEOUT_SECONDS=30
      - DATABASE_POOL_SIZE=10
      - DATABASE_MAX_CONNECTIONS=20
      - ALLOWED_ORIGINS=http://localhost:3030,http://localhost:5173,http://localhost:8090
      - CORS_ALLOW_CREDENTIALS=true
    restart: unless-stopped
    volumes:
      - logs_data:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - open-horizon-network

  # Optional: Add nginx reverse proxy (use --profile with-nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - open-horizon-network
    profiles:
      - with-nginx

  # Optional: Add PostgreSQL database (use --profile with-postgres)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=open_horizon_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - open-horizon-network
    profiles:
      - with-postgres

volumes:
  postgres_data:
  logs_data:

networks:
  open-horizon-network:
    driver: bridge